module Fake.FluentMigratorHelper

open System
open System.IO
open System.Text

type Provider =
  | None = 0
  | Db2 = 1
  | DotConnectOracle = 2
  | Firebird = 3
  | Hana = 4
  | Jet = 5
  | MySql = 6
  | Oracle = 7
  | OracleManaged = 8
  | Postgres = 9
  | SQLite = 10
  | SqlServer = 11
  | SqlServer2000 = 12
  | SqlServer2005 = 13
  | SqlServer2008 = 14
  | SqlServer2012 = 15
  | SqlServer2014 = 16
  | SqlServerCe = 17

type FluentMigratorParams =
  {
    /// The path to Migrate.exe
    ToolPath : string
    /// The database provider to use
    Provider : Provider
    /// Connection string or connection name to use
    Connection : string
    /// Connection string config path
    ConnectionStringConfigPath : string
    /// The namespace of the tests to run
    Namespace : string
    /// Whether migrations in nested namespaces should be included
    Nested : bool
    /// Output generated SQL to a file
    Output : bool
    // The file name to use for the generated SQL
    OutputFilename : string
    /// Whether or not to only output the SQL generated by the migration
    Preview : bool
    /// Number of versions to rollback if the task is 'rollback'. Default is 1
    Steps : int
    /// The task you want FluentMigrator to perform
    Task : string
    /// The specific version to migrate, default is 0 which will run all migrations
    Version : int
    /// The specific version to start migrating from, only used when NoConnection is
    /// true, default is 0
    StartVersion : int
    /// Indicates that migrations will be generated without consulting a target
    /// database. Should only be used when generating an output file
    NoConnection : bool
    /// The profile to run after executing migrations
    Profile : string
    /// The SqlCommand timeout to use
    Timeout : int
    /// The tags to filter migrations on
    Tags : string array
  }

let FluentMigratorDefaults =
  {
    ToolPath = findToolInSubPath "Migrate.exe" (currentDirectory @@ "tools" @@ "FluentMigrator")
    Provider = Provider.None
    Connection = null
    ConnectionStringConfigPath = null
    Namespace = null
    Nested = false
    Output = false
    OutputFilename = null
    Preview = false
    Steps = 1
    Task = "migrate"
    Version = 0
    StartVersion = -1
    NoConnection = false
    Profile = null
    Timeout = 30
    Tags = [||]
  }

let buildMigratorArgs parameters assembly =
  let providerText = parameters.Provider.ToString()
  let tags = List.ofSeq parameters.Tags
              |> List.map (fun t -> sprintf "--tag %s" t)
              |> String.concat " "

  new StringBuilder()
    |> append (sprintf "--assembly=%s" assembly)
    |> appendIfTrue (parameters.Provider.ToString() <> "None") (sprintf "--provider=%s" providerText)
    |> appendIfTrue (parameters.Connection <> null) (sprintf "--connection=%s" parameters.Connection)
    |> appendIfTrue (parameters.ConnectionStringConfigPath <> null) (sprintf "--connectionStringConfigPath=%s" parameters.ConnectionStringConfigPath)
    |> appendIfTrue (parameters.Namespace <> null) (sprintf "--namespace=%s" parameters.Namespace)
    |> appendIfTrue parameters.Nested "--nested"
    |> appendIfTrue parameters.Output "--output"
    |> appendIfTrue (parameters.Output && parameters.OutputFilename <> null) (sprintf "--outputFilename=%s" parameters.OutputFilename)
    |> appendIfTrue parameters.Preview "--preview"
    |> appendIfTrue (parameters.Task = "rollback") (sprintf "--steps=%d" parameters.Steps)
    |> append (sprintf "--task=%s" parameters.Task)
    |> appendIfTrue (parameters.Version <> 0) (sprintf "--version=%d" parameters.Version)
    |> appendIfTrue (parameters.NoConnection && parameters.Version <> -1) (sprintf "--startVersion=%d" parameters.StartVersion)
    |> appendIfTrue parameters.NoConnection "--noConnection"
    |> appendIfNotNull parameters.Profile (sprintf "--profile=%s" parameters.Profile)
    |> appendIfTrue (parameters.Timeout <> 30) (sprintf "--timeout=%d" parameters.Timeout)
    |> appendIfTrue (parameters.Tags.Length <> 0) tags
    |> toText

let FluentMigrator setParams assemblies =
  let details = separated ", " assemblies
  traceStartTask "FluentMigrator" details
  let parameters = setParams FluentMigratorDefaults

  let runMigrations assembly =
    let args = buildMigratorArgs parameters assembly
    trace args
    args

  [for asm in List.ofSeq assemblies do
    runMigrations asm]

  traceEndTask "FluentMigrator" details
